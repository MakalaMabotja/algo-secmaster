# Generated by Django 5.1.6 on 2025-03-30 08:30

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BankingDetails',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('banking_details_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('bank_name', models.CharField(max_length=255)),
                ('account_number', models.CharField(max_length=255)),
                ('branch_code', models.CharField(blank=True, max_length=30, null=True)),
                ('swift_code', models.CharField(max_length=15)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'Banking Details',
            },
        ),
        migrations.CreateModel(
            name='TaxResidencyDetails',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tax_residency_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('passport_country', models.CharField(max_length=255)),
                ('id_number', models.CharField(max_length=255)),
                ('tax_country', models.CharField(max_length=255)),
                ('tax_number', models.CharField(max_length=255)),
                ('is_valid', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'Tax Residency Details',
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('account_nickname', models.CharField(max_length=255)),
                ('account_type', models.CharField(choices=[('savings', 'Savings'), ('checking', 'Checking'), ('investment', 'Investment'), ('retirement', 'Retirement')], max_length=100)),
                ('balance', models.DecimalField(decimal_places=4, default=0, max_digits=19)),
                ('currency', models.CharField(choices=[('USD', 'US Dollar'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('CAD', 'Canadian Dollar')], max_length=3)),
                ('is_open', models.BooleanField(default=True)),
            ],
            options={
                'indexes': [models.Index(fields=['account_type'], name='users_accou_account_d5178f_idx'), models.Index(fields=['currency'], name='users_accou_currenc_0743da_idx')],
            },
        ),
        migrations.CreateModel(
            name='AddressDetails',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('address_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('street_address', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('state_province', models.CharField(max_length=100)),
                ('zip_code', models.CharField(max_length=20)),
                ('country', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Address Details',
                'indexes': [models.Index(fields=['country'], name='users_addre_country_4fa2f8_idx')],
            },
        ),
        migrations.CreateModel(
            name='TransactionSource',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('transaction_source_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('source_name', models.CharField(max_length=255)),
                ('source_type', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'indexes': [models.Index(fields=['source_type'], name='users_trans_source__0a824e_idx')],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, unique=True, validators=[django.core.validators.RegexValidator('^\\+?[1-9]\\d{1,14}$', 'Enter a valid E.164 phone number starting with + and country code')])),
                ('user_role', models.CharField(choices=[('customer', 'Customer'), ('admin', 'Administrator'), ('support', 'Customer Support'), ('manager', 'Account Manager')], default='customer', max_length=100)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='users.addressdetails')),
                ('banking_details', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='users.bankingdetails')),
                ('tax_residency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='users.taxresidencydetails')),
            ],
            options={
                'indexes': [models.Index(fields=['user_role'], name='users_user_user_ro_79a796_idx'), models.Index(fields=['is_verified'], name='users_user_is_veri_9ce429_idx')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('transaction_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('transaction_type', models.CharField(choices=[('deposit', 'Deposit'), ('withdrawal', 'Withdrawal'), ('dividend', 'Dividend'), ('transfer', 'Transfer'), ('fee', 'Fee')], max_length=50)),
                ('transaction_date', models.DateTimeField(auto_now_add=True)),
                ('transaction_amount', models.DecimalField(decimal_places=4, max_digits=19)),
                ('reference', models.CharField(blank=True, max_length=255, null=True)),
                ('transaction_status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], max_length=50)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transactions', to='users.account')),
                ('transaction_source', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='users.transactionsource')),
            ],
            options={
                'indexes': [models.Index(fields=['transaction_date'], name='users_trans_transac_626fff_idx'), models.Index(fields=['transaction_status'], name='users_trans_transac_cef815_idx'), models.Index(fields=['transaction_type'], name='users_trans_transac_dd58bb_idx')],
            },
        ),
    ]
